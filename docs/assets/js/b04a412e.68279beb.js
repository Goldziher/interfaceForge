(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[18],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return d},kt:function(){return g}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},d=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},l=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(t),g=a,f=l["".concat(c,".").concat(g)]||l[g]||u[g]||i;return t?n.createElement(f,o(o({ref:r},d),{},{components:t})):n.createElement(f,o({ref:r},d))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=l;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}l.displayName="MDXCreateElement"},5846:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return l}});var n=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],s={id:"designating-a-property-as-derived",title:"Designating a property as derived",description:"Designating a property as derived",slug:"/factory-schema/designating-a-property-as-derived"},c=void 0,p={unversionedId:"Schema/designating-a-property-as-derived",id:"Schema/designating-a-property-as-derived",isDocsHomePage:!1,title:"Designating a property as derived",description:"Designating a property as derived",source:"@site/docs/3-Schema/5-designating-a-property-as-derived.md",sourceDirName:"3-Schema",slug:"/factory-schema/designating-a-property-as-derived",permalink:"/interfaceForge/docs/factory-schema/designating-a-property-as-derived",editUrl:"https://github.com/Goldziher/interfaceForge/edit/main/docs/docs/3-Schema/5-designating-a-property-as-derived.md",version:"current",sidebarPosition:5,frontMatter:{id:"designating-a-property-as-derived",title:"Designating a property as derived",description:"Designating a property as derived",slug:"/factory-schema/designating-a-property-as-derived"},sidebar:"tutorialSidebar",previous:{title:"Designating a required build-time argument",permalink:"/interfaceForge/docs/factory-schema/designating-a-required-build-time-argument"},next:{title:"Using Generator Functions",permalink:"/interfaceForge/docs/factory-schema/using-generators"}},d=[],u={toc:d};function l(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Sometimes its desirable to derive a given property's value from the build result itself rather than from defaults or\nbuild time arguments. In such cases you can designate a property as derived by calling the eponymous method ",(0,i.kt)("inlineCode",{parentName:"p"},".derived"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="factories.ts"',title:'"factories.ts"'},"const UserFactory = new TypeFactory<User>(\n    {\n        profession: TypeFactory.iterate(['linguist', 'engineer', 'judge']),\n        salutation: TypeFactory.derived(),\n        // ...\n    },\n    (value) => ({\n        ...value,\n        salutation:\n            value.profession === 'linguist'\n                ? 'Dr.'\n                : value.profession === 'engineer'\n                ? 'Eng.'\n                : 'Hon.',\n    }),\n);\n")),(0,i.kt)("p",null,"When using derived properties you ",(0,i.kt)("strong",{parentName:"p"},"must")," provide a factory function that will set the value for all derived properties.\nIf, after any user provided factory function has been called, a derived property is still not set, an informative error will be thrown:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="factories.ts"',title:'"factories.ts"'},"const UserFactory = new TypeFactory<User>({\n    profession: TypeFactory.iterate(['linguist', 'engineer', 'judge']),\n    salutation: TypeFactory.derived(),\n    // ...\n});\n\ndescribe('User', () => {\n    let user: User;\n\n    beforeEach(async () => {\n        user = await UserFactory.build();\n        // Error: [interface-forge] missing derived parameters: salutation\n    });\n    // ...\n});\n")))}l.isMDXComponent=!0}}]);