(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),f=i,b=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(b,o(o({ref:t},l),{},{components:n})):r.createElement(b,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1416:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],s={id:"building-objects",title:"Building Objects",description:"How to build objects using interfaceForge factories",slug:"/usage/building-objects"},c=void 0,u={unversionedId:"Usage/building-objects",id:"Usage/building-objects",isDocsHomePage:!1,title:"Building Objects",description:"How to build objects using interfaceForge factories",source:"@site/docs/2-Usage/4-building-objects.md",sourceDirName:"2-Usage",slug:"/usage/building-objects",permalink:"/interfaceForge/docs/usage/building-objects",editUrl:"https://github.com/Goldziher/interfaceForge/edit/main/docs/docs/2-Usage/4-building-objects.md",version:"current",sidebarPosition:4,frontMatter:{id:"building-objects",title:"Building Objects",description:"How to build objects using interfaceForge factories",slug:"/usage/building-objects"},sidebar:"tutorialSidebar",previous:{title:"Passing a Factory Function",permalink:"/interfaceForge/docs/usage/passing-a-factory-function"},next:{title:"Batch Building",permalink:"/interfaceForge/docs/usage/batch-building"}},l=[],d={toc:l};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To use the factory to generate an object you should call either ",(0,a.kt)("inlineCode",{parentName:"p"},".build")," or ",(0,a.kt)("inlineCode",{parentName:"p"},".buildSync"),". The difference between these\ntwo methods is that ",(0,a.kt)("inlineCode",{parentName:"p"},".build")," is async while ",(0,a.kt)("inlineCode",{parentName:"p"},".buildSync")," is not:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="User.spec.ts"',title:'"User.spec.ts"'},"describe('User', () => {\n    const user = UserFactory.buildSync()\n    \n    // or using async\n    let user: User\n    beforeEach(async () => {\n        user = await UserFactory.build()\n    });\n    // ...\n});\n")),(0,a.kt)("p",null,"You can override a factory's default values by passing values when calling the build method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="User.spec.ts"',title:'"User.spec.ts"'},'describe(\'User\', () => {\n    const user = UserFactory.buildSync({ firstName: "George" })\n    \n    // or a function:\n    const user = UserFactory.buildSync((iteration) => ({ firstName: "George" + " " + iteration.toString() }))\n    \n    // or using async\n    let user: User\n    beforeEach(async () => {\n        user = await UserFactory.build({ firstName: "George" })\n    });\n});\n')),(0,a.kt)("p",null,"Overrides can take the same form as the defaults passed to a factory, that is, the overrides can be an ",(0,a.kt)("inlineCode",{parentName:"p"},"object"),", or\na ",(0,a.kt)("inlineCode",{parentName:"p"},"sync")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," function returning such and object. The overrides object will be merged with the factory's defaults,\noverriding values as required."),(0,a.kt)("p",null,"Alternatively, if you need to also provide a factory function when calling the factory, you can pass options as an\nobject with two (optional) keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"overrides"),": same as described above."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"factory function"),": a ",(0,a.kt)("a",{parentName:"li",href:"#passing-a-factory-function"},"factory function"),", which will be used instead of any factory\nfunction passed when initializing the factory (if any).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="User.spec.ts"',title:'"User.spec.ts"'},"describe('User', () => {\n    const user = UserFactory.buildSync({\n        overrides: () => ({ ... }),\n        factory: (values, iteration) => {\n            // ...\n        }\n    })\n    // or using async\n    let user: User\n    beforeEach(async () => {\n        user = await UserFactory.build({\n            overrides: async (iteration) => ({\n                // ...\n            }),\n            // values: user, iteration: number\n            factory: (values, iteration) => {\n                // ...\n            },\n        });\n    });\n});\n")))}p.isMDXComponent=!0}}]);