(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[869],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),f=a,g=m["".concat(c,".").concat(f)]||m[f]||u[f]||s;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},244:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=n(2122),a=n(9756),s=(n(7294),n(3905)),i=["components"],o={id:"basic-example",title:"Basic Example",description:"Basic usage examples",slug:"/usage/basic-example"},c=void 0,l={unversionedId:"Usage/basic-example",id:"Usage/basic-example",isDocsHomePage:!1,title:"Basic Example",description:"Basic usage examples",source:"@site/docs/2-Usage/1-basic-example.md",sourceDirName:"2-Usage",slug:"/usage/basic-example",permalink:"/interfaceForge/docs/usage/basic-example",editUrl:"https://github.com/Goldziher/interfaceForge/edit/gh-pages/docusaurus/docs/2-Usage/1-basic-example.md",version:"current",sidebarPosition:1,frontMatter:{id:"basic-example",title:"Basic Example",description:"Basic usage examples",slug:"/usage/basic-example"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/interfaceForge/docs/installation"},next:{title:"Passing Default Values",permalink:"/interfaceForge/docs/usage/passing-default-values"}},p=[],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"To create a factory you need some TS types:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="types.ts"',title:'"types.ts"'},"export interface UserProfile {\n    profession: string;\n    gender: string;\n    age: number;\n}\n\nexport interface Cat {\n    name: string;\n}\n\nexport interface User {\n    firstName: string;\n    lastName: string;\n    email: string;\n    profile: UserProfile;\n    cats: Cat[];\n}\n")),(0,s.kt)("p",null,"Pass the desired type as a generic argument when instantiating TypeFactory alongside default values for the factory:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="factories.ts"',title:'"factories.ts"'},"import { TypeFactory } from 'interface-forge';\nimport { User } from './types';\n\n// i is type number\nconst UserFactory = new TypeFactory<User>((i) => ({\n    firstName: 'John',\n    lastName: 'Smith',\n    email: 'js@example.com',\n    profile: {\n        profession: 'cook',\n        gender: 'male',\n        age: 27 + i,\n    },\n    cats: [],\n}));\n")),(0,s.kt)("p",null,"Then use the factory to create an object of the desired type:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="User.spec.ts"',title:'"User.spec.ts"'},'describe(\'User\', () => {\n    // you can pass override values when calling build\n    const user = UserFactory.buildSync({\n        firstName: \'Johanne\',\n        profile: {\n            profession: \'Journalist\',\n            gender: \'Female\',\n            age: 31,\n        },\n        cats: [],\n    });\n    // user == {\n    //     firstName: "Johanne",\n    //     lastName: "Smith",\n    //     email: "js@example.com",\n    //     profile: {\n    //         profession: "Journalist",\n    //         gender: "Female",\n    //         age: 31\n    //     },\n    //     cats: []\n    // }\n    // ...\n});\n')))}m.isMDXComponent=!0}}]);