(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[915],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,c=function(e,t){if(null==e)return{};var r,n,c={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(c[r]=e[r]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(c[r]=e[r])}return c}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,c=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=c,y=p["".concat(s,".").concat(m)]||p[m]||f[m]||a;return r?n.createElement(y,o(o({ref:t},l),{},{components:r})):n.createElement(y,o({ref:t},l))}));function m(e,t){var r=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var a=r.length,o=new Array(a);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:c,o[1]=i;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2991:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var n=r(2122),c=r(9756),a=(r(7294),r(3905)),o=["components"],i={id:"factory-schema",title:"FactorySchema",description:"The FactorySchema","object slug":"/factory-schema"},s=void 0,u={unversionedId:"Schema/factory-schema",id:"Schema/factory-schema",isDocsHomePage:!1,title:"FactorySchema",description:"The FactorySchema",source:"@site/docs/3-Schema/0-factory-schema.md",sourceDirName:"3-Schema",slug:"/Schema/factory-schema",permalink:"/interfaceForge/docs/Schema/factory-schema",editUrl:"https://github.com/Goldziher/interfaceForge/edit/main/docs/docs/3-Schema/0-factory-schema.md",version:"current",sidebarPosition:0,frontMatter:{id:"factory-schema",title:"FactorySchema",description:"The FactorySchema","object slug":"/factory-schema"},sidebar:"tutorialSidebar",previous:{title:"Creating and using Fixtures",permalink:"/interfaceForge/docs/usage/creating-and-using-fixtures"},next:{title:"Using Factories in Factory-Schema",permalink:"/interfaceForge/docs/factory-schema/using-factories-in-factory-schema"}},l=[],f={toc:l};function p(e){var t=e.components,r=(0,c.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When passing default values and overrides, TypeFactory and its subclasses expect what is referred to as ",(0,a.kt)("inlineCode",{parentName:"p"},"FactorySchema"),"\nobject in the code. A FactorySchema is an object that can include different types of values, including other factories,\ngenerator functions, factory functions and some builtin helpers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="types.ts',title:'"types.ts'},"type FactorySchema<T> = {\n    [K in keyof T]: T[K] extends CallableFunction\n        ? T[K]\n        :\n              | T[K]\n              | Promise<T[K]>\n              | Ref<T[K]>\n              | TypeFactory<T[K]>\n              | Generator<T[K], T[K], T[K]>\n              | BuildArgProxy;\n};\n")))}p.isMDXComponent=!0}}]);